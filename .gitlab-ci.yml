
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PIP_EXTRA_INDEX_URL: https://gitlab-ci-token:${CI_JOB_TOKEN}@HL_gaps_pub/api/v4/groups/ifam418/-/packages/pypi/simple
  #HTTP_PROXY: "http://http-proxy.ifam.fraunhofer.de:81"
  #HTTPS_PROXY: "http://http-proxy.ifam.fraunhofer.de:81"
  #GIT_SSL_NO_VERIFY: "True"
  #DOCKER_HOST: tcp://docker:2375/

cache:
  paths:
    - .cache/pip

.python_stage:
  image: ubuntu:20.04
  before_script:
    - mkdir -p ~/.local/bin
    - export PATH=~/.local/bin:$PATH
    
    - python -V
    - pip -V
    - pip install --user anybadge

stages:
  - test
  - build
  - deploy

pytest:
  tags:
    - asprunner
  stage: test
  extends: .python_stage
  script:
    - pip install --user -r requirements/dev.txt
    - pip install --user .
    - pytest -vv --junitxml=report.xml
    - coverage report
    - coverage xml
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  artifacts:
    when: always
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

code_quality:
  tags:
    - asprunner
  stage: test
  extends: .python_stage
  script:
    - tox -e flake8,black,mypy

pylint:
  tags:
    - asprunner
  stage: test
  extends: .python_stage
  script:
    - pip install --user -r requirements/dev.txt
    - pylint --exit-zero --output-format=text hl_gaps_pub | tee pylint.log
    - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.log)
    - mkdir -p ./badges
    - anybadge --label=pylint --value=$score --file=./badges/pylint.svg 2=red 4=orange 9.9=yellow 10=green
  artifacts:
    when: always
    paths:
      - badges/*.svg

integration_tests:
  tags:
    - asprunner
  stage: test
  extends: .python_stage
  script:
    - tox -e py39,py310,py311
    - export value="py39,py310,py311"
    - mkdir -p ./badges
    - anybadge --label=tox --value=$value --file=./badges/tox.svg
  artifacts:
    when: on_success
    paths:
      - badges/*.svg

cli_test:
  tags:
    - asprunner
  stage: test
  extends: .python_stage
  script:
    - pip install --user .
    - MyScript --help


wheel:
  tags:
    - asprunner
  stage: build
  extends: .python_stage
  needs: [ pytest, code_quality, integration_tests, cli_test ]
  
  script:
    - pip install --user wheel
    - python setup.py bdist_wheel
  artifacts:
    when: on_success
    paths:
      - dist/*.whl

pages:
  tags:
    - asprunner
  stage: deploy
  extends: .python_stage
  rules:
    - if: $CI_COMMIT_TAG
  needs: [ wheel ]
  script:
    - pip install --user Sphinx==7.2.6
    - pip install --user furo==2023.9.10
    - pip install --user sphinx-click==5.1.0
    
    - pip install --user sphinx-copybutton==0.5.2
    - pip install --user sphinx-tabs==3.4.4 . 
    - sphinx-apidoc -o docs/ hl_gaps_pub
    - cd docs ; make html
    - mv _build/html/ ../public/
    - cd ..
    - mkdir -p ./badges
    - anybadge --label=docs --value=passing --file=./badges/docs.svg
  artifacts:
    when: on_success
    paths:
      - public
      - badges/*.svg

publish_wheel:
  tags:
    - asprunner
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  extends: .python_stage
  needs: [ wheel ]
  script:
    - pip install --user wheel twine
    - python setup.py sdist bdist_wheel
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --verbose --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*

publish_release:
  tags:
    - asprunner
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: deploy
  needs: [ wheel ]
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Preparing the Release"
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: 'Created Release.'
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'

publish_badges:
  image: alpine/curl:latest
  tags:
    - asprunner
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  needs: [ publish_release ]
  script:
    - mkdir -p ./badges
    #- anybadge --label=docker-image --color=#4469ad --value=$CI_COMMIT_TAG --file=./badges/dockerimage.svg
    - curl https://img.shields.io/static/v1?message=$CI_COMMIT_TAG'&logo=docker&labelColor=5c5c5c&color=1182c3&logoColor=white&label=image&style=plastic' > ./badges/dockerimage.svg
    - curl https://img.shields.io/static/v1?message=$CI_COMMIT_TAG'&logo=gitlab&labelColor=5c5c5c&color=1182c3&logoColor=white&label=PyPI&style=plastic' > ./badges/wheel.svg
  artifacts:
    when: on_success
    paths:
      - badges/*.svg

#publish_docker_image:
#  tags:
#    - asprunner
#  image: docker:19.03.0-dind
#  variables:
#    DOCKER_DRIVER: overlay2
#    DOCKER_TLS_CERTDIR: ""
#    DOCKER_HOST: tcp://docker:2375
#  stage: deploy
#  needs: [ wheel ]
#  services:
#    - name: docker:19.03.0-dind
#      alias: docker
#      entrypoint: ["env", "-u", "DOCKER_HOST"]
#      command: ["dockerd-entrypoint.sh"]
#  before_script:
#    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#  # Default branch leaves tag empty (= latest tag)
#  # All other branches are tagged with the escaped branch name (commit ref slug)
#  script:
#    - |
#      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
#        tag=""
#        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
#      else
#        tag=":$CI_COMMIT_REF_SLUG"
#        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
#      fi
#    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
#    - docker push "$CI_REGISTRY_IMAGE${tag}"
#  # Run this job in a branch where a Dockerfile exists
#  rules:
#    - if: $CI_COMMIT_TAG
#  when: manual
